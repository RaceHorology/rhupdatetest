name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/**
      - feature/**
      - bugfix/**
  pull_request:
    branches:  
      - main

jobs:
  build:
    runs-on: [windows-latest]
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      commit: ${{ env.GITHUB_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Calculate Version
        uses: paulhatch/semantic-version@v5.0.3
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(release-MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(release-MINOR)"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true  

      - name: Debug Version
        run: |
          Write-Host "Output of version: ${{ steps.version.outputs.version }}"         
          Write-Host "Output of version_tag: ${{ steps.version.outputs.version_tag }}"         
          Write-Host "Output of major: ${{ steps.version.outputs.major }}"         
          Write-Host "Output of minor: ${{ steps.version.outputs.minor }}"         
          Write-Host "Output of patch: ${{ steps.version.outputs.patch }}"         

  upload_as_release:
    if: ${{ startsWith(github.ref, 'refs/heads/release') }}
    needs: [build]
    runs-on: [windows-latest]
    steps:
      - name: Create release entry on GitHub
        id: uploadAsRelease
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: false
          tag: v${{ needs.build.outputs.version_tag }}
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          makeLatest: true

      - name: Checkout for publish on server
        uses: actions/checkout@v1

      - name: publish on update server with github action reference
        id: publish_externally
        uses: ./.github/actions/publish-update
        with:
          release_id: ${{ steps.uploadAsRelease.outputs.id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          update_token: ${{ secrets.RHUPDATE_SECRET }}
          release_prefix: "v"
          release_channel: "teststable"
          release_version: v${{ needs.build.outputs.version }}


  upload_as_pre-release:
    if: ${{ startsWith(github.ref, 'refs/heads/main') }}
    needs: [build]
    runs-on: [windows-latest]
    steps:
      - name: Upload as pre-release 
        id: uploadAsPreRelease
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: true
          tag: ${{ needs.build.outputs.version }}-pre
          name: ${{ needs.build.outputs.version }}-pre (Automatic build from main)
          body: Achtung 
                Diese Version wurde automatisch aus den letzten Quellcodeänderungen gebaut und stellt nur den letzten Stand der Änderungen dar.
                Sie könnte daher instabil sein oder unvorhergesehene Probleme mit sich führen. 
          generateReleaseNotes: true
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout for publish on server
        uses: actions/checkout@v1

      - name: publish on update server with github action reference
        id: publish_externally
        uses: ./.github/actions/publish-update
        with:
          release_id: ${{ steps.uploadAsPreRelease.outputs.id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          update_token: ${{ secrets.RHUPDATE_SECRET }}
          release_prefix: "-pre"
          release_channel: "testbeta"
          release_version: ${{ needs.build.outputs.version }}
