name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/**
      - feature/**
      - bugfix/**
  pull_request:
    branches:  
      - main

jobs:
  build:
    runs-on: [windows-latest]
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      commit: ${{ env.GITHUB_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Calculate Version
        uses: paulhatch/semantic-version@v5.0.3
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(release-MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(release-MINOR)"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true  

      - name: Debug Version
        run: |
          Write-Host "Output of version: ${{ steps.version.outputs.version }}"         
          Write-Host "Output of version_tag: ${{ steps.version.outputs.version_tag }}"         
          Write-Host "Output of major: ${{ steps.version.outputs.major }}"         
          Write-Host "Output of minor: ${{ steps.version.outputs.minor }}"         
          Write-Host "Output of patch: ${{ steps.version.outputs.patch }}"         

  upload_as_release:
    if: ${{ startsWith(github.ref, 'refs/heads/release') }}
    needs: [build]
    runs-on: [windows-latest]
    steps:
      - name: Create release entry on GitHub
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: false
          tag: ${{ needs.build.outputs.version_tag }}
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true

  upload_as_pre-release:
    if: ${{ startsWith(github.ref, 'refs/heads/main') }}
    needs: [build]
    runs-on: [windows-latest]
    steps:
      - name: Upload as pre-release 
        id: uploadAsPreRelease
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: true
          tag: pre-${{ needs.build.outputs.version }}
          name: Automatic build from main pre-${{ needs.build.outputs.version }}
          body: Achtung 
                Diese Version wurde automatisch aus den letzten Quellcodeänderungen gebaut und stellt nur den letzten Stand der Änderungen dar.
                Sie könnte daher instabil sein.
          generateReleaseNotes: true
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: output html
        run: |
          Write-Host "Debug HTML ID: ${{ steps.uploadAsPreRelease.outputs.id }}" 
          Write-Host "Debug HTML Output: ${{ steps.uploadAsPreRelease.outputs.html_url }}" 

      - name: Retrieve Release Body
        id: retrieve_body
        run: |
          $url = "https://api.github.com/repos/$($env:GITHUB_REPOSITORY)/releases/$($env:RELEASE_ID)"
          $headers = @{
            "Accept" = "application/vnd.github+json"
            "Authorization" = "token $($env:GITHUB_TOKEN)"
          }
          $release = Invoke-WebRequest -Method Get -Uri $url -Headers $headers
          $release_body = $release.Content | ConvertFrom-Json | Select-Object -ExpandProperty body
          Write-Host $release_body

          # generate xml file content

          $xmlfile = Get-Content -Path '${{ github.workspace }}\.github\workflows\channel.xml.tpl'
          $xmlfile_new = $xmlfile -replace '__VERSION__', 'pre-${{ needs.build.outputs.version }}'
          $xmlfile_new = $xmlfile -replace '__DL_URL__', 'https://github.com/RaceHorology/RaceHorology/releases/download/pre-${{ needs.build.outputs.version }}/RaceHorologySetup-${{ needs.build.outputs.version }}.msi'
          $xmlfile_new = $xmlfile -replace '__CHANGELOG_URL__', 'https://rh-update/racehorology.com/versions/pre-${{ needs.build.outputs.version }}.html'

          # get sha from existing xml file
          $url = "https://api.github.com/repos/RaceHorology/rh-update/contents/channels/beta-channel.xml"
          $headers = @{
            "Accept" = "application/vnd.github+json"
            "Authorization" = "token ${{ secrets.RHUPDATE_SECRET }}"
          }
          $sha = Invoke-WebRequest -Method Get -Uri $url -Headers $headers
          $sha_body = $release.Content | ConvertFrom-Json | Select-Object -ExpandProperty sha

          #upload the channel file
          $base64Content = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($xmlfile_new))
          $body = @{
            message = "Upload beta-channel.xml file for pre-${{ needs.build.outputs.version }} release via Github Actions from main build project"
            sha = $sha_body
            content = $base64Content
          } | ConvertTo-Json
          $response = Invoke-RestMethod -Method Put -Uri "https://api.github.com/repos/RaceHorology/rh-update/contents/channels/beta-channel.xml" -Headers @{Authorization = "Token ${{ secrets.RHUPDATE_SECRET }}"} -Body $body

          #upload the versions file
          $release_body = "# pre-${{ needs.build.outputs.version }}" + "`r`n" + "`r`n" + "**Datum:** " + $(Get-Date -UFormat %d.%m.%Y) + "`r`n" + "`r`n" + $release_body

          $base64Content = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($release_body))
          $body = @{
            message = "Upload pre-${{ needs.build.outputs.version }}.html file via Github Actions from main build project"
            content = $base64Content
          } | ConvertTo-Json
          $response = Invoke-RestMethod -Method Put -Uri "https://api.github.com/repos/RaceHorology/rh-update/contents/versions/pre-${{ needs.build.outputs.version }}.md" -Headers @{Authorization = "Token ${{ secrets.RHUPDATE_SECRET }}"} -Body $body
        env:
          RELEASE_ID: ${{ steps.uploadAsPreRelease.outputs.id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          release_body: $release_body

      - name: Print Release Body
        run: |
          Write-Host "Release Body: ${{steps.retrieve_body.env.release_body}}"